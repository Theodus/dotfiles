#!/usr/bin/env python3

import asyncio
from i3ipc.aio import Connection
from i3ipc import Event
import logging
import sys

app = f'gtk-launch {sys.argv[1]}'
scratch_workspace = "__run"

logging.basicConfig(level = logging.DEBUG)

async def main():
    wm = await Connection(auto_reconnect = True).connect()
    original = (await wm.get_tree()).find_focused()
    print(f'[con_id={original.id}] focus')

    async def run_command(wm, cmd):
        await wm.command(cmd)
        print(cmd)

    async def on_new(wm, e):
        await run_command(wm, f'move to workspace {scratch_workspace}')

    async def on_move(wm, e):
        wm.off(on_move)
        wm.on(Event.WINDOW_FOCUS, on_swap)
        await run_command(wm, f'swap container with con_id {e.container.id}')

    async def on_swap(wm, e):
        if e.container.id == original.id: return
        print(f'[con_id={e.container.id}] focus')
        await run_command(wm, f'[con_id={original.id}] kill')
        wm.main_quit()

    wm.on(Event.WINDOW_NEW, on_new)
    wm.on(Event.WINDOW_MOVE, on_move)

    await wm.command(f'exec {app}')
    await wm.main()

event_loop = asyncio.new_event_loop()
asyncio.set_event_loop(event_loop)
event_loop.run_until_complete(main())
event_loop.close()
